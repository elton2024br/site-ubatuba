// Teste r√°pido das corre√ß√µes implementadas

// Configurar vari√°veis de ambiente
process.env.SUPABASE_URL = 'https://zrwxxnyygtesucsumzpg.supabase.co';
process.env.SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inpyd3h4bnl5Z3Rlc3Vjc3VtenBnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkxNjUwNDEsImV4cCI6MjA3NDc0MTA0MX0.nVmomxqSLSbHamUSFWIQ3W1DfefCAYCBssGhBv63LBQ';
process.env.JWT_SECRET = 'ubatuba_reage_2025_super_secret_key';

const Usuario = require('./models/Usuario-supabase');

async function testarCorrecoesLogin() {
    try {
        console.log('üß™ TESTANDO CORRE√á√ïES DO LOGIN\n');
        
        // Teste 1: Verificar se m√©todo verifyPassword existe
        console.log('1Ô∏è‚É£ Testando m√©todo verifyPassword...');
        if (typeof Usuario.verifyPassword === 'function') {
            console.log('   ‚úÖ M√©todo verifyPassword existe!');
            
            // Teste com senha conhecida
            const senhaPlain = 'admin123';
            const senhaHash = '$2a$10$Inq376YJd3BpmjzddL6pqOD6FL8OKkxSN0Tl8R9F0l9gX5vqgLE6O';
            
            const senhaValida = await Usuario.verifyPassword(senhaPlain, senhaHash);
            console.log('   üìù Teste de senha:', senhaValida ? '‚úÖ V√ÅLIDA' : '‚ùå INV√ÅLIDA');
        } else {
            console.log('   ‚ùå M√©todo verifyPassword n√£o existe!');
        }
        
        // Teste 2: Verificar se m√©todo hashPassword existe  
        console.log('\n2Ô∏è‚É£ Testando m√©todo hashPassword...');
        if (typeof Usuario.hashPassword === 'function') {
            console.log('   ‚úÖ M√©todo hashPassword existe!');
            
            const novoHash = await Usuario.hashPassword('teste123');
            console.log('   üìù Hash gerado:', novoHash.substring(0, 20) + '...');
        } else {
            console.log('   ‚ùå M√©todo hashPassword n√£o existe!');
        }
        
        // Teste 3: Tentar buscar usu√°rio (testar RLS)
        console.log('\n3Ô∏è‚É£ Testando busca de usu√°rio...');
        try {
            const usuario = await Usuario.findByEmail('admin@siteubatuba.com.br');
            
            if (usuario) {
                console.log('   ‚úÖ Usu√°rio encontrado!');
                console.log('   üìù Dados:', {
                    id: usuario.id,
                    nome: usuario.nome,
                    email: usuario.email,
                    role: usuario.role,
                    ativo: usuario.ativo
                });
                
                // Teste 4: Verificar senha do usu√°rio real
                console.log('\n4Ô∏è‚É£ Testando verifica√ß√£o de senha real...');
                const senhaRealValida = await Usuario.verifyPassword('admin123', usuario.senha);
                console.log('   üìù Senha admin123:', senhaRealValida ? '‚úÖ V√ÅLIDA' : '‚ùå INV√ÅLIDA');
                
            } else {
                console.log('   ‚ùå Usu√°rio n√£o encontrado (RLS ainda bloqueando?)');
            }
        } catch (error) {
            console.log('   ‚ùå Erro ao buscar usu√°rio:', error.message);
        }
        
        console.log('\nüìä DIAGN√ìSTICO:');
        
        if (typeof Usuario.verifyPassword !== 'function') {
            console.log('‚ùå PROBLEMA: M√©todo verifyPassword ainda n√£o existe');
            console.log('üí° SOLU√á√ÉO: Reiniciar o backend para carregar as mudan√ßas');
        } else {
            console.log('‚úÖ M√©todos de senha implementados corretamente');
        }
        
        console.log('\nüéØ PR√ìXIMOS PASSOS:');
        console.log('1. Reinicie o backend: cd backend; npm start');
        console.log('2. Execute o SQL RLS no Supabase (se n√£o fez)');
        console.log('3. Teste o login via interface web');
        console.log('4. Verifique os logs detalhados no terminal do backend');
        
    } catch (error) {
        console.error('üí• Erro no teste:', error);
    }
}

testarCorrecoesLogin();
